using namespace std;
#include <algorithm>
#include <vector>

unsigned long long countChange(const unsigned int total, const vector<unsigned int>& coins)
{
  
  /*cout << "total: " << total << " coins: {";
  for(unsigned int z: coins)
  {
    cout << z << ", ";
  }
  cout << "}" << endl;
  */
  vector<unsigned int> change = coins; 
  sort (change.begin(), change.end()); //least to greatest
  
  vector<unsigned long> combo(total+1); // (0 - total)
  combo[0] = 1; //must have 1 combo at 0
  
  for(unsigned int i=0; i < change.size();i++)//for each coin
  {
    for(unsigned int x=0;x < combo.size();x++) //for each combo
    {
      if(change[i] <= x)//if the coin fits
      {
        //cout << "combo "<< x+1 << ": " << combo[x] << "+" << combo[x - change[i]] << endl;
        combo[x] += combo[x - change[i]]; //expand the current combo by the biggest combo after subtracting coin  
      }
      //cout << "combo: "<< x+1 << " += combo " << x - change[i]+1 << endl;
    }
  }
  /*cout << " combo: {";
  for(unsigned int z: combo)
  {
    cout << z << ", ";
  }
  cout << "}" << endl;
  
  cout << "end" << endl;
  */
  return combo[total];
}

/*
Write a function that counts how many different ways you can make change for an amount of money, given an array of coin denominations. 
For example, there are 3 ways to give change for 4 if you have coins with denomination 1 and 2: 1+1+1+1, 1+1+2, 2+2.
Also, assume that you have an infinite amount of coins.
The order of coins does not matter
Your function should take an amount to change and an array of unique denominations for the coins:
*/
